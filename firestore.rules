
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an owner of a given organization
    function isOwner(orgId) {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organizationId == orgId &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'owner';
    }

    // Helper function to check if a user is a coach of a given stadium
    function isCoachOfStadium(stadiumId) {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'coach' &&
             stadiumId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.assignedStadiums;
    }
    
    // Helper function to check if a user is part of an organization
    function isMemberOfOrg(orgId) {
        return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organizationId == orgId;
    }

    // Users can only read their own profile, admins can read any profile in their org.
    match /users/{userId} {
      allow read: if request.auth.uid == userId || isOwner(resource.data.organizationId);
      allow create: if request.auth.uid != null; // Let Cloud Function handle role assignment
      allow update: if request.auth.uid == userId; // Users can update their own profile
    }

    // Organizations can be read by any member of that organization
    match /organizations/{orgId} {
        allow read: if isMemberOfOrg(orgId);
        allow update: if isOwner(orgId); // Only owners can update org details
        allow create: write: if request.auth.uid != null; // Let Cloud Function handle creation
    }

    // Stadiums can be read by any member of the org, written by owners.
    match /stadiums/{stadiumId} {
      allow read: if isMemberOfOrg(resource.data.organizationId);
      allow create, update, delete: if isOwner(resource.data.organizationId);
      
      // Students sub-collection
      match /students/{studentId} {
        allow read: if isMemberOfOrg(get(/databases/$(database)/documents/stadiums/$(stadiumId)).data.organizationId);
        allow create: if isCoachOfStadium(stadiumId); // Coaches can add students to their stadium
        allow update, delete: if isOwner(get(/databases/$(database)/documents/stadiums/$(stadiumId)).data.organizationId); // Only owners can modify/delete
      }
      
      // Attendance sub-collection
      match /attendance/{attendanceId} {
        allow read: if isMemberOfOrg(get(/databases/$(database)/documents/stadiums/$(stadiumId)).data.organizationId);
        allow create: if isCoachOfStadium(stadiumId); // Coaches mark attendance for their stadium
        allow update: if isCoachOfStadium(stadiumId); // Coaches can update attendance (e.g. fix mistake)
        // No delete for attendance records for auditing purposes. Can be changed if needed.
      }
      
      // Schedules sub-collection
      match /schedules/{scheduleId} {
        allow read: if isMemberOfOrg(get(/databases/$(database)/documents/stadiums/$(stadiumId)).data.organizationId);
        allow create, update: if isCoachOfStadium(stadiumId); // Coaches manage schedules for their stadium
      }
    }
  }
}
