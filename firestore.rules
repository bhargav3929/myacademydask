rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions
    function isOwner(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role == 'owner';
    }
    
    function isCoach(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role == 'coach';
    }

    function isSuperAdmin() {
      return request.auth.token.email == 'superadmin@courtcommand.com';
    }
    
    function userOwnsOrg(userId, orgId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.organizationId == orgId;
    }
    
    function coachIsAssignedToStadium(userId, stadiumId) {
       return stadiumId in get(/databases/$(database)/documents/users/$(userId)).data.assignedStadiums;
    }

    // USERS collection
    match /users/{userId} {
      // Any authenticated user can read their own profile
      allow read: if request.auth.uid == userId;
      // An owner can read profiles of users within their organization
      allow read: if request.auth != null && isOwner(request.auth.uid) && userOwnsOrg(request.auth.uid, resource.data.organizationId);
      // A super admin can read any user profile
      allow read: if request.auth != null && isSuperAdmin();
      // A user can update their own profile
      allow update: if request.auth.uid == userId;
       // Super admin can create users (for coaches/owners)
      allow create: if request.auth != null && isSuperAdmin();
    }
    
    // ORGANIZATIONS collection
    match /organizations/{orgId} {
        // An owner can read/write their own organization document
        allow read, write: if request.auth != null && isOwner(request.auth.uid) && userOwnsOrg(request.auth.uid, orgId);
    }
    
    // STADIUMS collection
    match /stadiums/{stadiumId} {
      // An owner can read/write stadiums within their organization
      allow read, write: if request.auth != null && isOwner(request.auth.uid) && userOwnsOrg(request.auth.uid, resource.data.organizationId);
      // A coach can read the stadium they are assigned to
      allow read: if request.auth != null && isCoach(request.auth.uid) && coachIsAssignedToStadium(request.auth.uid, stadiumId);
    }
    
    // STUDENTS subcollection
    match /stadiums/{stadiumId}/students/{studentId} {
      // An owner can manage students in their org's stadiums
      allow read, write, delete: if request.auth != null && isOwner(request.auth.uid) && userOwnsOrg(request.auth.uid, get(/databases/$(database)/documents/stadiums/$(stadiumId)).data.organizationId);
      // A coach can manage students in their assigned stadium
      allow read, write, delete: if request.auth != null && isCoach(request.auth.uid) && coachIsAssignedToStadium(request.auth.uid, stadiumId);
    }

    // ATTENDANCE subcollection
     match /stadiums/{stadiumId}/attendance/{attendanceId} {
       // An owner can read attendance in their org's stadiums
      allow read: if request.auth != null && isOwner(request.auth.uid) && userOwnsOrg(request.auth.uid, get(/databases/$(database)/documents/stadiums/$(stadiumId)).data.organizationId);
      // A coach can read and write attendance in their assigned stadium
      allow read, write: if request.auth != null && isCoach(request.auth.uid) && coachIsAssignedToStadium(request.auth.uid, stadiumId);
    }

    // ATTENDANCE SUBMISSIONS collection
    match /attendance_submissions/{submissionId} {
       // An owner can read attendance submissions in their org
       allow read: if request.auth != null && isOwner(request.auth.uid); // Needs refinement if orgId is added
       // A coach can create attendance submissions
       allow create: if request.auth != null && isCoach(request.auth.uid);
       // Super admin can read all submissions
       allow read: if request.auth != null && isSuperAdmin();
    }
    
    // SUPER ADMIN collections
    match /stadium_owners/{ownerId} {
      // Only super admin can read or write stadium owner documents
      allow read, write: if request.auth != null && isSuperAdmin();
    }

    match /super_admin_users/{adminId} {
      // Only a super admin can read their own document
      allow read, write: if request.auth != null && isSuperAdmin() && request.auth.uid == adminId;
    }

    match /system_metrics/{document=**} {
      // Only super admin can read system metrics
      allow read: if request.auth != null && isSuperAdmin();
    }
  }
}
