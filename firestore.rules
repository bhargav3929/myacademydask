
rules_version = '2';

// Helper functions to reduce duplication
function isAuth() {
  return request.auth != null;
}

function isOwner(orgId) {
  return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'owner' && request.auth.token.organizationId == orgId;
}

function isCoach(orgId) {
  return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'coach' && request.auth.token.organizationId == orgId;
}

function isCoachAssignedToStadium(stadiumId) {
    let user = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    return isCoach(user.organizationId) && stadiumId in user.assignedStadiums;
}

function isOwnerOfOrg(orgId) {
    return isOwner(orgId);
}

service cloud.firestore {
  match /databases/{database}/documents {

    // Organizations: Only owners of that specific organization can read/write.
    match /organizations/{orgId} {
      allow read, write: if isOwner(orgId);
    }
    
    // Users:
    // - Users can read their own profile.
    // - Owners can read profiles of users within their own organization.
    // - No one else can read user profiles.
    match /users/{userId} {
      allow read: if isAuth() && (request.auth.uid == userId || isOwner(resource.data.organizationId));
      allow create: if isAuth(); // Allow user creation (e.g., during sign up or by owner function)
      allow update: if isAuth() && request.auth.uid == userId; // Users can update their own profile
    }

    // Stadiums:
    // - Owners can create, read, update, delete stadiums within their organization.
    // - Coaches can read the details of the stadium they are assigned to.
    match /stadiums/{stadiumId} {
      allow create, update, delete: if isOwner(request.resource.data.organizationId);
      allow read: if isOwner(resource.data.organizationId) || isCoachAssignedToStadium(stadiumId);
      
      // Students Subcollection:
      // - Owners of the org can manage all students in any stadium.
      // - The coach assigned to this specific stadium can manage its students.
      match /students/{studentId} {
        allow read, create, update, delete: if isOwner(get(/databases/$(database)/documents/stadiums/$(stadiumId)).data.organizationId) || isCoachAssignedToStadium(stadiumId);
      }
      
      // Attendance Subcollection:
      // - Owners of the org can read all attendance records.
      // - The coach assigned to this specific stadium can create and read attendance records.
      match /attendance/{attendanceId} {
        allow read: if isOwner(get(/databases/$(database)/documents/stadiums/$(stadiumId)).data.organizationId) || isCoachAssignedToStadium(stadiumId);
        allow create: if isCoachAssignedToStadium(stadiumId);
        allow update, delete: if false; // Attendance records should be immutable
      }

      // Schedules Subcollection (if implemented):
      // - Similar rules to attendance.
      match /schedules/{scheduleId} {
        allow read, create, update: if isOwner(get(/databases/$(database)/documents/stadiums/$(stadiumId)).data.organizationId) || isCoachAssignedToStadium(stadiumId);
        allow delete: if false; // Prevent accidental deletion of schedules.
      }
    }
  }
}
